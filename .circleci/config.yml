# version: 2.1

# orbs:
#   aws-cli: circleci/aws-cli@2.0.3

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here 
#             aws cloudformation delete-stack \
#                 --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
#             aws cloudformation delete-stack \
#                 --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
#             aws s3 rb --force s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.  
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           when: on_fail
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS=$(curl -H "token: 9c67726a-dd0d-4ee9-a673-9d2bb902c92e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
#             echo $SUCCESS
#             if [ $SUCCESS==1 ]
#             then
#               echo "Migration Revert"
#               cd ~/project/backend
#               npm install
#               #  Add revert code here. You can find this in the Getting Started section.
#               npm run migrations:revert
#             fi
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - frontend-build
#       - run:
#           name: Build front-end
#           command: |
#             cd frontend
#             npm i
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       - restore_cache:
#           keys:
#             - backend-build
#       - run:
#           name: Back-end build
#           command: |
#              cd backend
#              npm i
#              npm run build
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys:
#             - frontend-build
#       # Your job code here
#       - run:
#           name: Test Frontend
#           command: |
#             cd frontend
#             npm run test
                
#   test-backend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys:
#             - backend-build
#       # Your job code here
#       - run:
#           name: Test Backend
#           command: |
#             cd backend
#             npm run test
            
#   scan-frontend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0   
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys:
#             - frontend-build
#       # Your job code here
#       - run:
#           name: Scan Frontend Dependencies
#           command: |
#             cd frontend
#             npm audit fix --audit-level=critical --force

#   scan-backend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys:
#             - backend-build
#       # Your job code here
#       - run:
#           name: Scan Backend Dependencies
#           command: |
#             cd backend
#             npm audit fix --audit-level=critical --force

#   deploy-infrastructure:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: cimg/base:2021.07
#     steps:
#       # Checkout code from git
#       - checkout
#       - aws-cli/setup
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --tags Name=backend-${CIRCLE_WORKFLOW_ID:0:7} \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#             URLS=$(aws ec2 describe-instances \
#               --region ap-northeast-1 \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text)
#             echo "URLS=$URLS"
#             echo "${CIRCLE_WORKFLOW_ID}"
#             curl -H "Content-Type: text/plain" \
#                  -H "token: 4f0c8d43-2483-48f5-82ed-89300a61fb14" \
#                  --request PUT \
#                  --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}

#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |

#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --tags Name=frontend-${CIRCLE_WORKFLOW_ID:0:7} \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text >> .circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure 
#       - destroy-environment

#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#       - image: python:3.7-alpine3.11
#     steps:
#       # Checkout code from git
#       - checkout
#       # Add ssh keys with fingerprint
#       - add_ssh_keys:
#           fingerprints:
#             - "06:6b:68:2e:c4:e9:c1:fb:f0:bf:94:92:50:44:79:54"
#       # attach workspace
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible
#             cat .circleci/ansible/inventory.txt
#       - run:
#           name: Set environment variables
#           command: |

#             echo ENVIRONMENT=development > backend/.env
#             echo NODE_ENV=production >> backend/.env
#             echo TYPEORM_CONNECTION=postgres >> backend/.env
#             echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
#             echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
#             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
#             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
#             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
#             echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
#             echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
#             echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env

#             ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
#       # Here's where you will add some code to rollback on failure
#       - run:
#           name: Install AWS CLI for rollback
#           when: on_fail
#           command: |
#             apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
#       - destroy-environment

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       - attach_workspace:
#           at: ~/
#       - restore_cache:
#           keys:
#             - backend-build
#       - aws-cli/setup
#       - run:
#           name: Run migrations
#           no_output_timeout: 20m
#           command: |
#             echo ENVIRONMENT=production > "backend/.env"
#             echo TYPEORM_CONNECTION=postgres >> "backend/.env"
#             echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
#             echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
#             echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
#             echo NODE_ENV=production >> "backend/.env"
#             echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
#             echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
#             echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
#             echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
#             echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

#             cd backend
#             npm run migrations > migration_log.txt
#             ls
#             cat migration_log.txt
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             cd backend
#             if [ $(cat migration_log.txt | grep -c "successfully") > 0 ]
#             then
#               echo "migration executed"
#               curl -H "Content-Type: text/plain" \
#                    -H "token: 9c67726a-dd0d-4ee9-a673-9d2bb902c92e" \
#                    --request PUT \
#                    --data "1" \
#                    https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#             else
#               echo "migration not executed"
#               curl -H "Content-Type: text/plain" \
#                    -H "token: 9c67726a-dd0d-4ee9-a673-9d2bb902c92e" \
#                    --request PUT \
#                    --data "0" \
#                    https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
#             fi
            
#      # Here's where you will add some code to rollback on failure
#       - revert-migrations
#       - destroy-environment

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       - aws-cli/setup
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#             cd frontend
#             npm i
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             BACKEND_IP=$(curl -H "token: 4f0c8d43-2483-48f5-82ed-89300a61fb14" \
#                  --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
#             echo $BACKEND_IP
#             echo ${CIRCLE_WORKFLOW_ID}
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo API_URL="${API_URL}" >> frontend/.env
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#             echo NODE_ENV=production >> frontend/.env
#             echo ENVIRONMENT=production >> frontend/.env
#             cd frontend
#             npm audit fix
#             npm run build
#             cd dist
#             echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
#             aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
#       # Here's where you will add some code to rollback on failure
#       - revert-migrations
#       - destroy-environment   
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#       - image: python:3.7-alpine3.11
#     steps:
#       # Checkout code from git
#       - checkout
#       # Add ssh keys with fingerprint
#       - add_ssh_keys:
#           fingerprints:
#             - "06:6b:68:2e:c4:e9:c1:fb:f0:bf:94:92:50:44:79:54"
#       # attach workspace
#       - attach_workspace:
#           at: ~/
#       - restore_cache:
#           keys:
#             - backend-build
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#             apk add --update ansible openssh-client tar gzip curl nodejs npm
#             pip install awscli
#       - run:
#           name: Deploy backend
#           no_output_timeout: 30m
#           command: |
#             # your code here
#             export ANSIBLE_HOST_KEY_CHECKING=False
#             ansible-playbook -i .circleci/ansible/inventory.txt \
#                                 .circleci/ansible/deploy-backend.yml
#       # Here's where you will add some code to rollback on failure
#       - revert-migrations
#       - destroy-environment

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#       - image: python:3.7-alpine3.11
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#             pip install awscli
#             apk add --update curl nodejs npm
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#             echo ${CIRCLE_WORKFLOW_ID}
#             BACKEND_IP=$(aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             curl "${API_URL}/api/status"
            
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-ap-northeast-1.amazonaws.com"
#             echo $URL
            
#             if curl -s $URL | grep "Welcome"
#             then
#               return 1
#             else
#               return 1
#             fi
#       # Here's where you will add some code to rollback on failure  
#       # - revert-migrations
#       # - destroy-environment

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       - aws-cli/setup
#       - run:
#           name: Cache old workflow id
#           command: |
#             # your code here
#             export OldWorkflowID=$(aws cloudformation \
#               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#               --no-paginate --output text)
#             curl -H "Content-Type: text/plain" \
#                  -H "token: 6d0413bb-4720-47f5-a60f-6374b0870d3b" \
#                  --request PUT \
#                  --data "$OldWorkflowID" https://api.memstash.io/values/workflow_id
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --stack-name udapeople \
#               --region ap-northeast-1 \
#               --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID}
#       # Here's where you will add some code to rollback on failure
#       - revert-migrations
#       - destroy-environment 

#   cleanup:
#       docker:
#         # Docker image here
#         - image: python:3.7-alpine3.11
#       steps:
#         # Checkout code from git
#         - run:
#             name: Get old stack workflow id
#             command: |
#               # your code here
#               export OldWorkflowID=$(curl -H "token: 6d0413bb-4720-47f5-a60f-6374b0870d3b" \
#                                           --request GET https://api.memstash.io/values/workflow_id)
#               echo $OldWorkflowID
#               export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
#                       --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
#         - run:
#             name: Remove old stacks and files
#             command: |
#               echo $OldWorkflowID
#               echo $STACKS
#               if [ "${OldWorkflowID}" != "" ]
#               then
#                 aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#                 aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#                 aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#               fi        

# workflows:
#   default:
#     jobs:
#       - build-frontend
#       - build-backend
#       - test-frontend:
#           requires: [build-frontend]
#       - test-backend:
#           requires: [build-backend]
#       - scan-backend:
#           requires: [build-backend]
#       - scan-frontend:
#           requires: [build-frontend]
#       - deploy-infrastructure:
#           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#           filters:
#             branches:
#               only: [main]
#       - configure-infrastructure:
#           requires: [deploy-infrastructure]
#       - run-migrations:
#           requires: [configure-infrastructure]
#       - deploy-frontend:
#           requires: [run-migrations]
#       - deploy-backend:
#           requires: [deploy-frontend]
#       - smoke-test:
#           requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]

version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
    # Add parameter here
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete files from bucket
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            # Delete front end stack
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID}
            # Delete back end stack
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
    # Add parameter here
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            
            MIGRATION_RESULT=$(curl -H "token: 30f7cb09-23d2-46d6-b2b9-fd13579be334" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
            if($MIGRATION_RESULT==1)
            then
              cd ~/project/backend
              npm install
            # Add revert code here. You can find this in the Getting Started section.
              sudo npm run migrations:revert
              exit 1
            fi
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build1]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: 
            - frontend/node_modules
            - frontend/dist
          key: frontend-build1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build1]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: 
            - backend/node_modules
            - backend/dist
          key: backend-build1
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build1]
      - run: 
          name: frontend test
          command: |
            cd frontend
            npm run test
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build1]
      - run: 
          name: backend test
          command: |
            cd backend
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build1]
      - run: 
          name: frontend scan
          command: |
            cd frontend
            npm update
            npm audit fix --audit-level=critical --force
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build1]
      - run: 
          name: backend scan
          command: |
            cd backend
            npm update
            npm audit fix --audit-level=critical --force
            
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
            URLS=$(aws ec2 describe-instances --region ap-northeast-1 --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text)
            echo "URLS=$URLS"
            echo "${CIRCLE_WORKFLOW_ID}"
            curl -H "Content-Type: text/plain" -H "token: baca3071-c660-4431-b697-6f9bc4624dd7" --request PUT \
              --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
            ARN=$(aws s3 ls | grep udapeople)
            echo "ARN=$ARN"
            curl -H "Content-Type: text/plain" -H "token: 533f4c58-9f5c-48ef-8233-3775d61da939" --request PUT \
              --data "$ARN" https://api.memstash.io/values/arn_${CIRCLE_WORKFLOW_ID}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" >> ./.circleci/ansible/inventory.txt
            backend_ip=$(curl -H  "token: baca3071-c660-4431-b697-6f9bc4624dd7" --request GET \
            https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
            echo "$backend_ip" >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - run:
          name: Resolve dependencies
          command: |
            yum -y install tar gzip jq npm 
      - persist_to_workspace:
          root: /root
          paths:
            - project
      - destroy-environment
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout  
      - add_ssh_keys:
          fingerprints: ["c4:8d:74:26:8f:f8:15:aa:eb:4b:8c:66:2f:fc:ee:d4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
    # Here's where you will add some code to rollback on failure
      - destroy-environment
    
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            pwd
            echo -e "TYPEORM_HOST=$TYPEORM_HOST \n
            TYPEORM_CONNECTION=$TYPEORM_CONNECTION \n
            TYPEORM_PORT=$TYPEORM_PORT \n
            TYPEORM_USERNAME=$TYPEORM_USERNAME \n
            TYPEORM_PASSWORD=$TYPEORM_PASSWORD \n
            TYPEORM_DATABASE=$TYPEORM_DATABASE \n
            TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS \n
            TYPEORM_ENTITIES=$TYPEORM_ENTITIES \n
            NODE_ENV=production \n
            ENVIRONMENT=$ENVIRONMENT" > .env
            cat .env
            npm install
            npm run migrations > migration_result.txt
            cat migration_result.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully"  migration_result.txt
            then
              echo "Migration success"
              curl -H "Content-Type: text/plain" -H "token: 30f7cb09-23d2-46d6-b2b9-fd13579be334" --request PUT \
              --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID} 
            else
              echo "Migration failure"
              curl -H "Content-Type: text/plain" -H "token: 30f7cb09-23d2-46d6-b2b9-fd13579be334" --request PUT \
              --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID} 
            fi
            echo "${CIRCLE_WORKFLOW_ID}"
      - destroy-environment
      - revert-migrations
            
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Get backend url and deploy frontend objects
          command: |
            export BACKEND_IP=$(curl -H  "token: baca3071-c660-4431-b697-6f9bc4624dd7" --request GET \
            https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID})
            export API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            echo "${API_URL}"
            cat frontend/.env
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID}".tar.gz dist
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID}
      - destroy-environment
      - revert-migrations
            
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c4:8d:74:26:8f:f8:15:aa:eb:4b:8c:66:2f:fc:ee:d4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: create .env files
          command: |
            echo ENVIROMENT=production > "backend/.env"
            echo NODE_ENV=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Deploy backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
          no_output_timeout: 30m
      - destroy-environment
      - revert-migrations
  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add ansible
            pip3 install awscli
            apk add --update tar gzip curl nodejs npm
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.ap-northeast-1.amazonaws.com"
            if curl -s "http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.ap-northeast-1.amazonaws.com" | grep -o "Welcome"
            then
              return 0
            else
              return 1
            fi
            
      #backend smoke test is failing
      - run:
          name: Backend smoke test.
          command: |
            PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            curl -s "http://${PUBLIC_IP}:3030/api/status" | grep "ok"
      - destroy-environment
      - revert-migrations
      
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c4:8d:74:26:8f:f8:15:aa:eb:4b:8c:66:2f:fc:ee:d4"]
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo OldWorkflowID: "$OldWorkflowID"
            
            curl -H "Content-Type: text/plain" -H "token: 87112b30-3ba8-479d-950f-237a49cebbcd" --request PUT \
              --data "$OldWorkflowID" https://api.memstash.io/values/id_${CIRCLE_WORKFLOW_ID}
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo STACKS: "$STACKS"
            echo "Update cloudfront stack"
            aws cloudformation deploy \
              --stack-name udapeople \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
              --tags project=udapeople-cloudfront
      - destroy-environment
      - revert-migrations
      
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints: [ "c4:8d:74:26:8f:f8:15:aa:eb:4b:8c:66:2f:fc:ee:d4" ]
      - run:
          name: Get old stack workflow id and Cleanup
          command: |
            
            OldWorkflowID=$(curl -H  "token: 87112b30-3ba8-479d-950f-237a49cebbcd" --request GET \
            https://api.memstash.io/values/id_${CIRCLE_WORKFLOW_ID})  
            
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE \
            --no-paginate --output text)
            echo OldWorkflowID: ${OldWorkflowID}
            echo STACKS: "$STACKS"
            
            if [[ -n "${OldWorkflowID}" ]]  &&  [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # Delete files from bucket
              echo "s3://udapeople-${OldWorkflowID}"
              aws s3 rm s3://udapeople-${OldWorkflowID}/ --recursive
              # Delete front end stack
              aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
              # Delete back end stack
              aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
            fi
      
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [main]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [main]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [main]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [main]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [main]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [main]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [main]