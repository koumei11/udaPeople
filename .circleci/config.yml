version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here 
            aws cloudformation delete-stack \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm --recursive s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 9c67726a-dd0d-4ee9-a673-9d2bb902c92e" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [ $SUCCESS==1 ]
            then
              echo "Migration Revert"
              cd ~/project/backend
              npm install
              #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Test Backend
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0   
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - frontend-build
      # Your job code here
      - run:
          name: Scan Frontend Dependencies
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys:
            - backend-build
      # Your job code here
      - run:
          name: Scan Backend Dependencies
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:2021.07
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags Name=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            URLS=$(aws ec2 describe-instances \
              --region ap-northeast-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "URLS=$URLS"
            echo "${CIRCLE_WORKFLOW_ID}"
            curl -H "Content-Type: text/plain" \
                 -H "token: 4f0c8d43-2483-48f5-82ed-89300a61fb14" \
                 --request PUT \
                 --data "$URLS" https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags Name=frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "06:6b:68:2e:c4:e9:c1:fb:f0:bf:94:92:50:44:79:54"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - backend-build
      - aws-cli/setup
      - run:
          name: Run migrations
          no_output_timeout: 20m
          command: |
            cd backend
            npm run migrations:revert
            npm run migrations > migration_log.txt
            cat migration_log.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            if [ $(cat migration_log.txt | grep -c "successfully") > 0 ]
            then
              echo "migration executed"
              curl -H "Content-Type: text/plain" \
                   -H "token: 9c67726a-dd0d-4ee9-a673-9d2bb902c92e" \
                   --request PUT \
                   --data "1" \
                   https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "migration not executed"
              curl -H "Content-Type: text/plain" \
                   -H "token: 9c67726a-dd0d-4ee9-a673-9d2bb902c92e" \
                   --request PUT \
                   --data "0" \
                   https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            
     # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=$(curl -H "token: 4f0c8d43-2483-48f5-82ed-89300a61fb14" \
                 --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            echo $BACKEND_IP
            echo ${CIRCLE_WORKFLOW_ID}
            export API_URL="http://${BACKEND_IP}:3030"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            pwd
            echo API_URL="${API_URL}" >> frontend/.env
            echo NODE_ENV=production >> frontend/.env
            echo ENVIRONMENT=production >> frontend/.env
            cd frontend
            npm audit fix
            npm run build
            cd dist
            echo "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment   
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "06:6b:68:2e:c4:e9:c1:fb:f0:bf:94:92:50:44:79:54"
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible openssh-client tar gzip curl
            pip install awscli
      - run:
          name: Set environment variables
          command: |
            echo ENVIRONMENT=development > backend/.env
            echo NODE_ENV=production >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
      - run:
          name: Deploy backend
          command: |
            # your code here
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i .circleci/ansible/inventory.txt \
                                .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl
      - run:
          name: Get backend url
          command: |
            # your code here
            echo ${CIRCLE_WORKFLOW_ID}
            BACKEND_IP=$(curl -H "token: 4f0c8d43-2483-48f5-82ed-89300a61fb14" \
                 --request GET https://api.memstash.io/values/url_${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            curl "${API_URL}/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-ap-northeast-1.amazonaws.com"
            echo $URL
            
            if curl -s $URL | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup
      - run:
          name: Cache old workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" \
                 -H "token: 6d0413bb-4720-47f5-a60f-6374b0870d3b" \
                 --request PUT \
                 --data "$OldWorkflowID" https://api.memstash.io/values/workflow_id
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name udapeople \
              --region ap-northeast-1 \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID}
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment 

  cleanup:
      docker:
        # Docker image here
        - image: python:3.7-alpine3.11
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID=$(curl -H "token: 6d0413bb-4720-47f5-a60f-6374b0870d3b" \
                                          --request GET https://api.memstash.io/values/workflow_id)
              echo $OldWorkflowID
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                      --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
        - run:
            name: Remove old stacks and files
            command: |
              echo $OldWorkflowID
              echo $STACKS
              if [ "${OldWorkflowID}" != "" ]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi        

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [deploy-frontend]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]